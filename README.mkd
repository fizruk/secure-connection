Simple secure interacting
========================

This set of Haskell sources demonstrates the use of OpenSSL, BSON
and Google Snappy compression for well-defined communication.

Prerequisites
-------------

You'll need the following libraries to make this all work (I used the
latest available version of each library):

* [HsOpenSSL](http://hackage.haskell.org/package/HsOpenSSL) (0.10.1.2)
* [bson](http://hackage.haskell.org/package/bson) (0.1.6)
* [bson-mapping](http://hackage.haskell.org/package/bson-mapping) (0.1.4)
* [snappy](http://hackage.haskell.org/snappy) (0.2.0.1)

I also personally used the latest available version of GHC (7.2.2), but
it should work fine with previous 7.x.x versions (and possibly with 6.x.x).

Build and run
-------------

Building is simple with Makefile supplied:

    $ make

Before you start the server you should provide private key
and identity certificate for it. By now it is hardcoded that
private key and certificate should be located in the same
directory with names `privkey.pem` and `cert.pem` appropriately.
To create a default private key and a certificate with `openssl`
you should run

    $ make certificate

This command will run `openssl` with some default arguments.
The latter will ask you for some information to create a certificate.
You can provide any information you want: it does not matter what you
will type in there for server and client to create a connection.

When you have both `privkey.pem` and `cert.pem` in
the same directory as executable `server` is located you can
start server and client:

    $ server &
    $ client localhost 7357

That's it!

